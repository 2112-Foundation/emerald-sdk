/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
declare type ErrorWithCode = Error & {
    code: number;
};
declare type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidMetadata: 'Invalid Metadata Address'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMetadataError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectFeeReduction: 'Fee reduction must be within 0-100'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectFeeReductionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * MetadataCreatorParseError: 'Can't Parse The NFT's Creators'
 *
 * @category Errors
 * @category generated
 */
export declare class MetadataCreatorParseErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NftDoesntMatchCollectionPda: 'Provided NFT is not a member of provided collection'
 *
 * @category Errors
 * @category generated
 */
export declare class NftDoesntMatchCollectionPdaError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * UnexpectedCreator: 'Creator of the NFT is not the expected creator'
 *
 * @category Errors
 * @category generated
 */
export declare class UnexpectedCreatorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * UnverifiedCreator: 'Creator of the NFT is not the expected creator'
 *
 * @category Errors
 * @category generated
 */
export declare class UnverifiedCreatorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ConversionFailed: 'Couldnt up the number'
 *
 * @category Errors
 * @category generated
 */
export declare class ConversionFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NftTicketMismatch: 'Provided NFT is not stored in the NFT PDA'
 *
 * @category Errors
 * @category generated
 */
export declare class NftTicketMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * NotStakedLongEnough: 'NFT needs to be staked longer to withdraw'
 *
 * @category Errors
 * @category generated
 */
export declare class NotStakedLongEnoughError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectCollectionAddresses: 'Ensure correct addresses for collection provided'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectCollectionAddressesError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ZeroValueRate: 'Ensure rate is non-zero'
 *
 * @category Errors
 * @category generated
 */
export declare class ZeroValueRateError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ZeroValueEpoch: 'Ensure epoch is non-zero'
 *
 * @category Errors
 * @category generated
 */
export declare class ZeroValueEpochError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CommunityMismatch: 'Community address does not match user community account'
 *
 * @category Errors
 * @category generated
 */
export declare class CommunityMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TimeCapExceeded: 'Promotion period has ended'
 *
 * @category Errors
 * @category generated
 */
export declare class TimeCapExceededError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooFewCollectionsProvided: 'Length of total remaining accounts is equal to collection index vector'
 *
 * @category Errors
 * @category generated
 */
export declare class TooFewCollectionsProvidedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * EmptyVector: 'Length of collection and policy indexes vectors can't be zero'
 *
 * @category Errors
 * @category generated
 */
export declare class EmptyVectorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooManyCollections1: 'Number of collections larger than the number of indexes'
 *
 * @category Errors
 * @category generated
 */
export declare class TooManyCollections1Error extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooManyPolicies: 'Number of policies exceeds number of policy choices'
 *
 * @category Errors
 * @category generated
 */
export declare class TooManyPoliciesError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * TooManyCollections: 'Number of collections exceeds number of collection choices'
 *
 * @category Errors
 * @category generated
 */
export declare class TooManyCollectionsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CollectionPolicyMismatch: 'Provided collection policy does not match derived one'
 *
 * @category Errors
 * @category generated
 */
export declare class CollectionPolicyMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CollectionMismatch: 'Provided collection does not match derived one'
 *
 * @category Errors
 * @category generated
 */
export declare class CollectionMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IndexesMismatch: 'Index for collections and policies must be the same size'
 *
 * @category Errors
 * @category generated
 */
export declare class IndexesMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectPolicyCount: 'Policy indexes must match the number of provided policies policy accounts'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectPolicyCountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectCollectionCount: 'Collection indexes must match the number of provided collections accounts'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectCollectionCountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CommunityLocked: 'Unable to withdraw from the community pool'
 *
 * @category Errors
 * @category generated
 */
export declare class CommunityLockedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PolicyLocked: 'Unable to modify this policy'
 *
 * @category Errors
 * @category generated
 */
export declare class PolicyLockedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectSuperAdmin: 'Incorrect admin provided'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectSuperAdminError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * IncorrectSPLDecimals: 'Incorrect decimals. Exceeds 18'
 *
 * @category Errors
 * @category generated
 */
export declare class IncorrectSPLDecimalsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
