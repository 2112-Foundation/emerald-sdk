/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category ClaimSingle
 * @category generated
 */
export type ClaimSingleInstructionArgs = {
  communityIdx: number
  collectionIdx: number
  collectionPolicyIdx: number
  userCommunityAccountIdx: number
  nftMint: web3.PublicKey
}
/**
 * @category Instructions
 * @category ClaimSingle
 * @category generated
 */
export const claimSingleStruct = new beet.BeetArgsStruct<
  ClaimSingleInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['communityIdx', beet.u32],
    ['collectionIdx', beet.u32],
    ['collectionPolicyIdx', beet.u32],
    ['userCommunityAccountIdx', beet.u32],
    ['nftMint', beetSolana.publicKey],
  ],
  'ClaimSingleInstructionArgs'
)
/**
 * Accounts required by the _claimSingle_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] mainPool
 * @property [_writable_] userAccount
 * @property [_writable_] userCommunityAccount
 * @property [_writable_] communityPool
 * @property [] collection
 * @property [_writable_] nftTicket
 * @property [] collectionPolicy
 * @property [_writable_] rewardVault
 * @property [_writable_] userRewardAccount
 * @category Instructions
 * @category ClaimSingle
 * @category generated
 */
export type ClaimSingleInstructionAccounts = {
  user: web3.PublicKey
  mainPool: web3.PublicKey
  userAccount: web3.PublicKey
  userCommunityAccount: web3.PublicKey
  communityPool: web3.PublicKey
  collection: web3.PublicKey
  nftTicket: web3.PublicKey
  collectionPolicy: web3.PublicKey
  rewardVault: web3.PublicKey
  userRewardAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimSingleInstructionDiscriminator = [
  233, 35, 238, 119, 177, 204, 237, 108,
]

/**
 * Creates a _ClaimSingle_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ClaimSingle
 * @category generated
 */
export function createClaimSingleInstruction(
  accounts: ClaimSingleInstructionAccounts,
  args: ClaimSingleInstructionArgs,
  programId = new web3.PublicKey('2HLsq8QGhRnUUwuukCKLNdpvNc4utW6AQVV1VoY9jgEd')
) {
  const [data] = claimSingleStruct.serialize({
    instructionDiscriminator: claimSingleInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mainPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userCommunityAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communityPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nftTicket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionPolicy,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userRewardAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
