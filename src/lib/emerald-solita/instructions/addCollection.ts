/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category AddCollection
 * @category generated
 */
export type AddCollectionInstructionArgs = {
  communityIdx: number
  masterCollectionKey: web3.PublicKey
  masterEditionKey: web3.PublicKey
  creatorKey: web3.PublicKey
  verifiedCreator: boolean
}
/**
 * @category Instructions
 * @category AddCollection
 * @category generated
 */
export const addCollectionStruct = new beet.BeetArgsStruct<
  AddCollectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['communityIdx', beet.u32],
    ['masterCollectionKey', beetSolana.publicKey],
    ['masterEditionKey', beetSolana.publicKey],
    ['creatorKey', beetSolana.publicKey],
    ['verifiedCreator', beet.bool],
  ],
  'AddCollectionInstructionArgs'
)
/**
 * Accounts required by the _addCollection_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] communityPool
 * @property [_writable_] collection
 * @property [_writable_] mainPool
 * @category Instructions
 * @category AddCollection
 * @category generated
 */
export type AddCollectionInstructionAccounts = {
  admin: web3.PublicKey
  communityPool: web3.PublicKey
  collection: web3.PublicKey
  mainPool: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addCollectionInstructionDiscriminator = [
  79, 172, 225, 142, 219, 192, 171, 80,
]

/**
 * Creates a _AddCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddCollection
 * @category generated
 */
export function createAddCollectionInstruction(
  accounts: AddCollectionInstructionAccounts,
  args: AddCollectionInstructionArgs,
  programId = new web3.PublicKey('2HLsq8QGhRnUUwuukCKLNdpvNc4utW6AQVV1VoY9jgEd')
) {
  const [data] = addCollectionStruct.serialize({
    instructionDiscriminator: addCollectionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.communityPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mainPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
