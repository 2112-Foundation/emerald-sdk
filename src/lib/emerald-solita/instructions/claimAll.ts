/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimAll
 * @category generated
 */
export type ClaimAllInstructionArgs = {
  communityIdx: number
  communityAccount: number
  firstNftPdaIdx: number
  collectionTicketMatchVec: beet.bignum[]
  collectionIdxVec: beet.bignum[]
  policyTicketMatchVec: beet.bignum[]
  policyIdxVec: beet.bignum[]
}
/**
 * @category Instructions
 * @category ClaimAll
 * @category generated
 */
export const claimAllStruct = new beet.FixableBeetArgsStruct<
  ClaimAllInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['communityIdx', beet.u32],
    ['communityAccount', beet.u32],
    ['firstNftPdaIdx', beet.u32],
    ['collectionTicketMatchVec', beet.array(beet.u64)],
    ['collectionIdxVec', beet.array(beet.u64)],
    ['policyTicketMatchVec', beet.array(beet.u64)],
    ['policyIdxVec', beet.array(beet.u64)],
  ],
  'ClaimAllInstructionArgs'
)
/**
 * Accounts required by the _claimAll_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] mainPool
 * @property [_writable_] communityPool
 * @property [_writable_] userAccount
 * @property [_writable_] userCommunityAccount
 * @property [_writable_] rewardVault
 * @property [_writable_] userRewardAccount
 * @category Instructions
 * @category ClaimAll
 * @category generated
 */
export type ClaimAllInstructionAccounts = {
  user: web3.PublicKey
  mainPool: web3.PublicKey
  communityPool: web3.PublicKey
  userAccount: web3.PublicKey
  userCommunityAccount: web3.PublicKey
  rewardVault: web3.PublicKey
  userRewardAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimAllInstructionDiscriminator = [
  194, 194, 80, 194, 234, 210, 217, 90,
]

/**
 * Creates a _ClaimAll_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ClaimAll
 * @category generated
 */
export function createClaimAllInstruction(
  accounts: ClaimAllInstructionAccounts,
  args: ClaimAllInstructionArgs,
  programId = new web3.PublicKey('2HLsq8QGhRnUUwuukCKLNdpvNc4utW6AQVV1VoY9jgEd')
) {
  const [data] = claimAllStruct.serialize({
    instructionDiscriminator: claimAllInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mainPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communityPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userCommunityAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userRewardAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
